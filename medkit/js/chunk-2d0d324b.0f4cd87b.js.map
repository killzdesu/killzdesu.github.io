{"version":3,"sources":["webpack:///./node_modules/alertifyjs/build/alertify.js"],"names":["window","NOT_DISABLED_NOT_RESET","keys","ENTER","ESC","F1","F12","LEFT","RIGHT","TAB","defaults","autoReset","basic","closable","closableByDimmer","invokeOnCloseOff","frameless","defaultFocusOff","maintainFocus","maximizable","modal","movable","moveBounded","overflow","padding","pinnable","pinned","preventBodyShift","resizable","startMaximized","transition","transitionOff","tabbable","join","notifier","delay","position","closeButton","classes","base","prefix","message","top","right","bottom","left","center","visible","hidden","close","glossary","title","ok","cancel","acccpt","deny","confirm","decline","maximize","restore","theme","input","hooks","preinit","postinit","openDialogs","addClass","element","classNames","className","removeClass","original","split","toBeRemoved","x","length","index","indexOf","splice","isRightToLeft","getComputedStyle","document","body","direction","getScrollTop","documentElement","scrollTop","getScrollLeft","scrollLeft","clearContents","lastChild","removeChild","copy","src","cpy","Array","isArray","push","Date","getTime","RegExp","source","global","ignoreCase","multiline","lastIndex","prop","hasOwnProperty","destruct","instance","initialize","elements","root","parentNode","settings","__settings","__init","__internal","IsPassiveSupported","options","Object","defineProperty","get","addEventListener","removeEventListener","e","on","el","event","fn","useCapture","passive","capture","off","t","type","supported","transitions","undefined","style","delegate","context","method","arguments","args","apply","createCloseEvent","button","dispatchEvent","eventType","call","dialog","scrollX","scrollY","usedKeys","tabindex","isSafari","navigator","userAgent","templates","dimmer","reset","commands","header","content","footer","buttons","primary","auxiliary","resizeHandle","animationIn","animationOut","fixed","maximized","modeless","noSelection","noOverflow","noPadding","pin","shake","unpinned","noTransition","setup","alertify","focus","select","buttonsDefinition","b","ref","i","internal","isOpen","activeElement","timerIn","timerOut","onshow","onclosing","onclose","onfocus","onmove","onmoved","onresize","onresized","onmaximize","onmaximized","onrestore","onrestored","resetHandler","beginMoveHandler","beginResizeHandler","bringToFrontHandler","modalClickHandler","buttonsClickHandler","commandsClickHandler","transitionInHandler","transitionOutHandler","destroy","createElement","display","innerHTML","firstChild","container","nextSibling","buttonTemplate","key","cloneNode","text","attrs","setAttribute","scope","appendChild","opKey","onReset","beginMove","beginResize","bringToFront","handleTransitionInEvent","handleTransitionOutEvent","set","build","saveScrollPosition","restoreScrollPosition","scrollTo","ensureNoOverflow","requiresNoOverflow","isModal","isMaximized","topScroll","add","scrollHeight","clientHeight","updateTransition","value","oldValue","offsetWidth","updateTransitionOff","updateDisplayMode","unbindModelessEvents","updateAbsPositionFix","bindModelessEvents","updateBasicMode","updateFramelessMode","setFocus","optionUpdated","option","newValue","setHeader","updatePinned","updateClosable","updateMaximizable","updatePinnable","updateMovable","updateResizable","onupdate","update","obj","callback","old","result","op","items","found","Error","triggerClose","triggerCallback","invokeOnClose","target","srcElement","isPinned","unpin","addAbsPositionFix","marginTop","marginLeft","marginRight","removeAbsPositionFix","parseInt","bindClosableEvents","unbindClosableEvents","cancelClick","modalClickHandlerTS","timeStamp","callbackTS","cancelKeyup","check","now","idx","disabled","closeEvent","keyupHandler","keyCode","keydownHandler","preventDefault","stopPropagation","resetTarget","querySelector","firstReset","lastReset","lastFocusedElement","relatedTarget","within","contains","findTabbable","last","tabbables","slice","querySelectorAll","reverse","offsetParent","offsetHeight","getClientRects","recycleTab","shiftKey","clearTimeout","resetMove","resetResize","offsetX","offsetY","xProp","yProp","bounds","refreshTop","moveDelegate","moveElement","moveElementBounded","Math","min","maxLeft","max","minLeft","maxTop","minTop","eventSrc","targetTouches","current","offsetLeft","offsetTop","move","endMove","bindMovableEvents","unbindMovableEvents","startingLeft","Number","Nan","startingWidth","minWidth","handleOffset","resizeElement","pageRelative","X","Y","pageX","pageY","clientX","clientY","isRTL","isNaN","height","width","diff","abs","minHeight","maxWidth","resize","endResize","bindResizableEvents","unbindResizableEvents","windowResize","bindEvents","unbindEvents","this","moveTo","y","resizeTo","w","parseFloat","h","regex","match","clientWidth","setting","self","k","o","n","settingUpdated","item","HTMLElement","setContent","showModal","show","setTimeout","hasAttribute","prepare","removeAttribute","closeOthers","closeAll","openInstances","baseClass","updatePosition","pushInstance","pushed","popInstance","create","div","clickDelegate","getAttribute","dismiss","transitionDone","timer","clickHandler","transitionEndHandler","transitionTimeout","clearTimers","_content","_wait","wait","insertBefore","ondismiss","clicked","dismissOthers","dismissAll","except","clone","Alertify","dialogs","extend","sub","get_dialog","name","register","Factory","transient","definition","factory","notify","success","error","warning","main","_title","_message","_onok","onok","setMessage","label","returnValue","autoConfirm","duration","task","clearAutoConfirm","clearInterval","startAutoConfirm","setInterval","_oncancel","oncancel","labels","defaultFocus","reverseButtons","autoOk","autoCancel","p","_value","module","exports"],"mappings":"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","file":"js/chunk-2d0d324b.0f4cd87b.js","sourcesContent":["/**\r\n * alertifyjs 1.13.1 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2019 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\r\n( function ( window ) {\r\n    'use strict';\r\n    var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\r\n    /**\r\n     * Keys enum\r\n     * @type {Object}\r\n     */\r\n    var keys = {\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        F1: 112,\r\n        F12: 123,\r\n        LEFT: 37,\r\n        RIGHT: 39,\r\n        TAB: 9\r\n    };\r\n    /**\r\n     * Default options \r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        autoReset:true,\r\n        basic:false,\r\n        closable:true,\r\n        closableByDimmer:true,\r\n        invokeOnCloseOff:false,\r\n        frameless:false,\r\n        defaultFocusOff:false,\r\n        maintainFocus:true, //global default not per instance, applies to all dialogs\r\n        maximizable:true,\r\n        modal:true,\r\n        movable:true,\r\n        moveBounded:false,\r\n        overflow:true,\r\n        padding: true,\r\n        pinnable:true,\r\n        pinned:true,\r\n        preventBodyShift:false, //global default not per instance, applies to all dialogs\r\n        resizable:true,\r\n        startMaximized:false,\r\n        transition:'pulse',\r\n        transitionOff:false,\r\n        tabbable:['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])'+NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET+','),//global\r\n        notifier:{\r\n            delay:5,\r\n            position:'bottom-right',\r\n            closeButton:false,\r\n            classes: {\r\n                base: 'alertify-notifier',\r\n                prefix:'ajs-',\r\n                message: 'ajs-message',\r\n                top: 'ajs-top',\r\n                right: 'ajs-right',\r\n                bottom: 'ajs-bottom',\r\n                left: 'ajs-left',\r\n                center: 'ajs-center',\r\n                visible: 'ajs-visible',\r\n                hidden: 'ajs-hidden',\r\n                close: 'ajs-close'\r\n            }\r\n        },\r\n        glossary:{\r\n            title:'AlertifyJS',\r\n            ok: 'OK',\r\n            cancel: 'Cancel',\r\n            acccpt: 'Accept',\r\n            deny: 'Deny',\r\n            confirm: 'Confirm',\r\n            decline: 'Decline',\r\n            close: 'Close',\r\n            maximize: 'Maximize',\r\n            restore: 'Restore',\r\n        },\r\n        theme:{\r\n            input:'ajs-input',\r\n            ok:'ajs-ok',\r\n            cancel:'ajs-cancel',\r\n        },\r\n        hooks:{\r\n            preinit:function(){},\r\n            postinit:function(){}\r\n        }\r\n    };\r\n    \r\n    //holds open dialogs instances\r\n    var openDialogs = [];\r\n\r\n    /**\r\n     * [Helper]  Adds the specified class(es) to the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function addClass(element,classNames){\r\n        element.className += ' ' + classNames;\r\n    }\r\n    \r\n    /**\r\n     * [Helper]  Removes the specified class(es) from the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function removeClass(element, classNames) {\r\n        var original = element.className.split(' ');\r\n        var toBeRemoved = classNames.split(' ');\r\n        for (var x = 0; x < toBeRemoved.length; x += 1) {\r\n            var index = original.indexOf(toBeRemoved[x]);\r\n            if (index > -1){\r\n                original.splice(index,1);\r\n            }\r\n        }\r\n        element.className = original.join(' ');\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Checks if the document is RTL\r\n     *\r\n     * @return {Boolean} True if the document is RTL, false otherwise.\r\n     */\r\n    function isRightToLeft(){\r\n        return window.getComputedStyle(document.body).direction === 'rtl';\r\n    }\r\n    /**\r\n     * [Helper]  Get the document current scrollTop\r\n     *\r\n     * @return {Number} current document scrollTop value\r\n     */\r\n    function getScrollTop(){\r\n        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Get the document current scrollLeft\r\n     *\r\n     * @return {Number} current document scrollLeft value\r\n     */\r\n    function getScrollLeft(){\r\n        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);\r\n    }\r\n\r\n    /**\r\n    * Helper: clear contents\r\n    *\r\n    */\r\n    function clearContents(element){\r\n        while (element.lastChild) {\r\n            element.removeChild(element.lastChild);\r\n        }\r\n    }\r\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\r\n    function copy(src) {\r\n        if(null === src){\r\n            return src;\r\n        }\r\n        var cpy;\r\n        if(Array.isArray(src)){\r\n            cpy = [];\r\n            for(var x=0;x<src.length;x+=1){\r\n                cpy.push(copy(src[x]));\r\n            }\r\n            return cpy;\r\n        }\r\n      \r\n        if(src instanceof Date){\r\n            return new Date(src.getTime());\r\n        }\r\n      \r\n        if(src instanceof RegExp){\r\n            cpy = new RegExp(src.source);\r\n            cpy.global = src.global;\r\n            cpy.ignoreCase = src.ignoreCase;\r\n            cpy.multiline = src.multiline;\r\n            cpy.lastIndex = src.lastIndex;\r\n            return cpy;\r\n        }\r\n        \r\n        if(typeof src === 'object'){\r\n            cpy = {};\r\n            // copy dialog pototype over definition.\r\n            for (var prop in src) {\r\n                if (src.hasOwnProperty(prop)) {\r\n                    cpy[prop] = copy(src[prop]);\r\n                }\r\n            }\r\n            return cpy;\r\n        }\r\n        return src;\r\n    }\r\n    /**\r\n      * Helper: destruct the dialog\r\n      *\r\n      */\r\n    function destruct(instance, initialize){\r\n        if(instance.elements){\r\n            //delete the dom and it's references.\r\n            var root = instance.elements.root;\r\n            root.parentNode.removeChild(root);\r\n            delete instance.elements;\r\n            //copy back initial settings.\r\n            instance.settings = copy(instance.__settings);\r\n            //re-reference init function.\r\n            instance.__init = initialize;\r\n            //delete __internal variable to allow re-initialization.\r\n            delete instance.__internal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test to check if passive event listeners are supported.\r\n     */\r\n    var IsPassiveSupported = false;\r\n    try {\r\n        var options = Object.defineProperty({}, 'passive', {\r\n            get: function () {\r\n                IsPassiveSupported = true;\r\n            }\r\n        });\r\n        window.addEventListener('test', options, options);\r\n        window.removeEventListener('test', options, options);\r\n    } catch (e) {}\r\n\r\n     /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to register the listenr on.\r\n     * @param {string} event The event type to listen for.\r\n     * @param {Function} handler The function to handle the event.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var on = function (el, event, fn, useCapture, passive) {\r\n        el.addEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to unregister the listenr from.\r\n     * @param {string} event The event type to remove.\r\n     * @param {Function} fn The event handler to remove.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var off = function (el, event, fn, useCapture, passive) {\r\n        el.removeEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Prevent default event from firing\r\n     *\r\n     * @param  {Event} event Event object\r\n     * @return {undefined}\r\n\r\n    function prevent ( event ) {\r\n        if ( event ) {\r\n            if ( event.preventDefault ) {\r\n                event.preventDefault();\r\n            } else {\r\n                event.returnValue = false;\r\n            }\r\n        }\r\n    }\r\n    */\r\n    var transition = (function () {\r\n        var t, type;\r\n        var supported = false;\r\n        var transitions = {\r\n            'animation'        : 'animationend',\r\n            'OAnimation'       : 'oAnimationEnd oanimationend',\r\n            'msAnimation'      : 'MSAnimationEnd',\r\n            'MozAnimation'     : 'animationend',\r\n            'WebkitAnimation'  : 'webkitAnimationEnd'\r\n        };\r\n\r\n        for (t in transitions) {\r\n            if (document.documentElement.style[t] !== undefined) {\r\n                type = transitions[t];\r\n                supported = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            supported: supported\r\n        };\r\n    }());\r\n\r\n    /**\r\n    * Creates event handler delegate that sends the instance as last argument.\r\n    * \r\n    * @return {Function}    a function wrapper which sends the instance as last argument.\r\n    */\r\n    function delegate(context, method) {\r\n        return function () {\r\n            if (arguments.length > 0) {\r\n                var args = [];\r\n                for (var x = 0; x < arguments.length; x += 1) {\r\n                    args.push(arguments[x]);\r\n                }\r\n                args.push(context);\r\n                return method.apply(context, args);\r\n            }\r\n            return method.apply(context, [null, context]);\r\n        };\r\n    }\r\n    /**\r\n    * Helper for creating a dialog close event.\r\n    * \r\n    * @return {object}\r\n    */\r\n    function createCloseEvent(index, button) {\r\n        return {\r\n            index: index,\r\n            button: button,\r\n            cancel: false\r\n        };\r\n    }\r\n    /**\r\n    * Helper for dispatching events.\r\n    *\r\n    * @param  {string} evenType The type of the event to disptach.\r\n    * @param  {object} instance The dialog instance disptaching the event.\r\n    *\r\n    * @return   {any}   The result of the invoked function.\r\n    */\r\n    function dispatchEvent(eventType, instance) {\r\n        if ( typeof instance.get(eventType) === 'function' ) {\r\n            return instance.get(eventType).call(instance);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Super class for all dialogs\r\n     *\r\n     * @return {Object}\t\tbase dialog prototype\r\n     */\r\n    var dialog = (function () {\r\n        var //holds the list of used keys.\r\n            usedKeys = [],\r\n            //dummy variable, used to trigger dom reflow.\r\n            reflow = null,\r\n            //holds body tab index in case it has any.\r\n            tabindex = false,\r\n            //condition for detecting safari\r\n            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\r\n            //dialog building blocks\r\n            templates = {\r\n                dimmer:'<div class=\"ajs-dimmer\"></div>',\r\n                /*tab index required to fire click event before body focus*/\r\n                modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\r\n                dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\r\n                reset: '<button class=\"ajs-reset\"></button>',\r\n                commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\r\n                header: '<div class=\"ajs-header\"></div>',\r\n                body: '<div class=\"ajs-body\"></div>',\r\n                content: '<div class=\"ajs-content\"></div>',\r\n                footer: '<div class=\"ajs-footer\"></div>',\r\n                buttons: { primary: '<div class=\"ajs-primary ajs-buttons\"></div>', auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>' },\r\n                button: '<button class=\"ajs-button\"></button>',\r\n                resizeHandle: '<div class=\"ajs-handle\"></div>',\r\n            },\r\n            //common class names\r\n            classes = {\r\n                animationIn: 'ajs-in',\r\n                animationOut: 'ajs-out',\r\n                base: 'alertify',\r\n                basic:'ajs-basic',\r\n                capture: 'ajs-capture',\r\n                closable:'ajs-closable',\r\n                fixed: 'ajs-fixed',\r\n                frameless:'ajs-frameless',\r\n                hidden: 'ajs-hidden',\r\n                maximize: 'ajs-maximize',\r\n                maximized: 'ajs-maximized',\r\n                maximizable:'ajs-maximizable',\r\n                modeless: 'ajs-modeless',\r\n                movable: 'ajs-movable',\r\n                noSelection: 'ajs-no-selection',\r\n                noOverflow: 'ajs-no-overflow',\r\n                noPadding:'ajs-no-padding',\r\n                pin:'ajs-pin',\r\n                pinnable:'ajs-pinnable',\r\n                prefix: 'ajs-',\r\n                resizable: 'ajs-resizable',\r\n                restore: 'ajs-restore',\r\n                shake:'ajs-shake',\r\n                unpinned:'ajs-unpinned',\r\n                noTransition:'ajs-no-transition'\r\n            };\r\n\r\n        /**\r\n         * Helper: initializes the dialog instance\r\n         * \r\n         * @return\t{Number}\tThe total count of currently open modals.\r\n         */\r\n        function initialize(instance){\r\n            \r\n            if(!instance.__internal){\r\n                //invoke preinit global hook\r\n                alertify.defaults.hooks.preinit(instance);\r\n                //no need to expose init after this.\r\n                delete instance.__init;\r\n              \r\n                //keep a copy of initial dialog settings\r\n                if(!instance.__settings){\r\n                    instance.__settings = copy(instance.settings);\r\n                }\r\n                \r\n                //get dialog buttons/focus setup\r\n                var setup;\r\n                if(typeof instance.setup === 'function'){\r\n                    setup = instance.setup();\r\n                    setup.options = setup.options  || {};\r\n                    setup.focus = setup.focus  || {};\r\n                }else{\r\n                    setup = {\r\n                        buttons:[],\r\n                        focus:{\r\n                            element:null,\r\n                            select:false\r\n                        },\r\n                        options:{\r\n                        }\r\n                    };\r\n                }\r\n                \r\n                //initialize hooks object.\r\n                if(typeof instance.hooks !== 'object'){\r\n                    instance.hooks = {};\r\n                }\r\n\r\n                //copy buttons defintion\r\n                var buttonsDefinition = [];\r\n                if(Array.isArray(setup.buttons)){\r\n                    for(var b=0;b<setup.buttons.length;b+=1){\r\n                        var ref  = setup.buttons[b],\r\n                            cpy = {};\r\n                        for (var i in ref) {\r\n                            if (ref.hasOwnProperty(i)) {\r\n                                cpy[i] = ref[i];\r\n                            }\r\n                        }\r\n                        buttonsDefinition.push(cpy);\r\n                    }\r\n                }\r\n\r\n                var internal = instance.__internal = {\r\n                    /**\r\n                     * Flag holding the open state of the dialog\r\n                     * \r\n                     * @type {Boolean}\r\n                     */\r\n                    isOpen:false,\r\n                    /**\r\n                     * Active element is the element that will receive focus after\r\n                     * closing the dialog. It defaults as the body tag, but gets updated\r\n                     * to the last focused element before the dialog was opened.\r\n                     *\r\n                     * @type {Node}\r\n                     */\r\n                    activeElement:document.body,\r\n                    timerIn:undefined,\r\n                    timerOut:undefined,\r\n                    buttons: buttonsDefinition,\r\n                    focus: setup.focus,\r\n                    options: {\r\n                        title: undefined,\r\n                        modal: undefined,\r\n                        basic:undefined,\r\n                        frameless:undefined,\r\n                        defaultFocusOff:undefined,\r\n                        pinned: undefined,\r\n                        movable: undefined,\r\n                        moveBounded:undefined,\r\n                        resizable: undefined,\r\n                        autoReset: undefined,\r\n                        closable: undefined,\r\n                        closableByDimmer: undefined,\r\n                        invokeOnCloseOff:undefined,\r\n                        maximizable: undefined,\r\n                        startMaximized: undefined,\r\n                        pinnable: undefined,\r\n                        transition: undefined,\r\n                        transitionOff: undefined,\r\n                        padding:undefined,\r\n                        overflow:undefined,\r\n                        onshow:undefined,\r\n                        onclosing:undefined,\r\n                        onclose:undefined,\r\n                        onfocus:undefined,\r\n                        onmove:undefined,\r\n                        onmoved:undefined,\r\n                        onresize:undefined,\r\n                        onresized:undefined,\r\n                        onmaximize:undefined,\r\n                        onmaximized:undefined,\r\n                        onrestore:undefined,\r\n                        onrestored:undefined\r\n                    },\r\n                    resetHandler:undefined,\r\n                    beginMoveHandler:undefined,\r\n                    beginResizeHandler:undefined,\r\n                    bringToFrontHandler:undefined,\r\n                    modalClickHandler:undefined,\r\n                    buttonsClickHandler:undefined,\r\n                    commandsClickHandler:undefined,\r\n                    transitionInHandler:undefined,\r\n                    transitionOutHandler:undefined,\r\n                    destroy:undefined\r\n                };\r\n\r\n                var elements = {};\r\n                //root node\r\n                elements.root = document.createElement('div');\r\n                //prevent FOUC in case of async styles loading.\r\n                elements.root.style.display = 'none';\r\n                elements.root.className = classes.base + ' ' + classes.hidden + ' ';\r\n\r\n                elements.root.innerHTML = templates.dimmer + templates.modal;\r\n                \r\n                //dimmer\r\n                elements.dimmer = elements.root.firstChild;\r\n\r\n                //dialog\r\n                elements.modal = elements.root.lastChild;\r\n                elements.modal.innerHTML = templates.dialog;\r\n                elements.dialog = elements.modal.firstChild;\r\n                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\r\n\r\n                //reset links\r\n                elements.reset = [];\r\n                elements.reset.push(elements.dialog.firstChild);\r\n                elements.reset.push(elements.dialog.lastChild);\r\n                \r\n                //commands\r\n                elements.commands = {};\r\n                elements.commands.container = elements.reset[0].nextSibling;\r\n                elements.commands.pin = elements.commands.container.firstChild;\r\n                elements.commands.maximize = elements.commands.pin.nextSibling;\r\n                elements.commands.close = elements.commands.maximize.nextSibling;\r\n                \r\n                //header\r\n                elements.header = elements.commands.container.nextSibling;\r\n\r\n                //body\r\n                elements.body = elements.header.nextSibling;\r\n                elements.body.innerHTML = templates.content;\r\n                elements.content = elements.body.firstChild;\r\n\r\n                //footer\r\n                elements.footer = elements.body.nextSibling;\r\n                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\r\n                \r\n                //resize handle\r\n                elements.resizeHandle = elements.footer.nextSibling;\r\n\r\n                //buttons\r\n                elements.buttons = {};\r\n                elements.buttons.auxiliary = elements.footer.firstChild;\r\n                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\r\n                elements.buttons.primary.innerHTML = templates.button;\r\n                elements.buttonTemplate = elements.buttons.primary.firstChild;\r\n                //remove button template\r\n                elements.buttons.primary.removeChild(elements.buttonTemplate);\r\n                               \r\n                for(var x=0; x < instance.__internal.buttons.length; x+=1) {\r\n                    var button = instance.__internal.buttons[x];\r\n                    \r\n                    // add to the list of used keys.\r\n                    if(usedKeys.indexOf(button.key) < 0){\r\n                        usedKeys.push(button.key);\r\n                    }\r\n\r\n                    button.element = elements.buttonTemplate.cloneNode();\r\n                    button.element.innerHTML = button.text;\r\n                    if(typeof button.className === 'string' &&  button.className !== ''){\r\n                        addClass(button.element, button.className);\r\n                    }\r\n                    for(var key in button.attrs){\r\n                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){\r\n                            button.element.setAttribute(key, button.attrs[key]);\r\n                        }\r\n                    }\r\n                    if(button.scope === 'auxiliary'){\r\n                        elements.buttons.auxiliary.appendChild(button.element);\r\n                    }else{\r\n                        elements.buttons.primary.appendChild(button.element);\r\n                    }\r\n                }\r\n                //make elements pubic\r\n                instance.elements = elements;\r\n                \r\n                //save event handlers delegates\r\n                internal.resetHandler = delegate(instance, onReset);\r\n                internal.beginMoveHandler = delegate(instance, beginMove);\r\n                internal.beginResizeHandler = delegate(instance, beginResize);\r\n                internal.bringToFrontHandler = delegate(instance, bringToFront);\r\n                internal.modalClickHandler = delegate(instance, modalClickHandler);\r\n                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\r\n                internal.commandsClickHandler = delegate(instance, commandsClickHandler);\r\n                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\r\n                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\r\n\r\n                //settings\r\n                for(var opKey in internal.options){\r\n                    if(setup.options[opKey] !== undefined){\r\n                        // if found in user options\r\n                        instance.set(opKey, setup.options[opKey]);\r\n                    }else if(alertify.defaults.hasOwnProperty(opKey)) {\r\n                        // else if found in defaults options\r\n                        instance.set(opKey, alertify.defaults[opKey]);\r\n                    }else if(opKey === 'title' ) {\r\n                        // else if title key, use alertify.defaults.glossary\r\n                        instance.set(opKey, alertify.defaults.glossary[opKey]);\r\n                    }\r\n                }\r\n\r\n                // allow dom customization\r\n                if(typeof instance.build === 'function'){\r\n                    instance.build();\r\n                }\r\n\r\n                //invoke postinit global hook\r\n                alertify.defaults.hooks.postinit(instance);\r\n            }\r\n\r\n            //add to the end of the DOM tree.\r\n            document.body.appendChild(instance.elements.root);\r\n        }\r\n\r\n        /**\r\n         * Helper: maintains scroll position\r\n         *\r\n         */\r\n        var scrollX, scrollY;\r\n        function saveScrollPosition(){\r\n            scrollX = getScrollLeft();\r\n            scrollY = getScrollTop();\r\n        }\r\n        function restoreScrollPosition(){\r\n            window.scrollTo(scrollX, scrollY);\r\n        }\r\n\r\n        /**\r\n         * Helper: adds/removes no-overflow class from body\r\n         *\r\n         */\r\n        function ensureNoOverflow(){\r\n            var requiresNoOverflow = 0;\r\n            for(var x=0;x<openDialogs.length;x+=1){\r\n                var instance = openDialogs[x];\r\n                if(instance.isModal() || instance.isMaximized()){\r\n                    requiresNoOverflow+=1;\r\n                }\r\n            }\r\n            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){\r\n                //last open modal or last maximized one\r\n                removeClass(document.body, classes.noOverflow);\r\n                preventBodyShift(false);\r\n            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){\r\n                //first open modal or first maximized one\r\n                preventBodyShift(true);\r\n                addClass(document.body, classes.noOverflow);\r\n            }\r\n        }\r\n        var top = '', topScroll = 0;\r\n        /**\r\n         * Helper: prevents body shift.\r\n         *\r\n         */\r\n        function preventBodyShift(add){\r\n            if(alertify.defaults.preventBodyShift){\r\n                if(add && document.documentElement.scrollHeight > document.documentElement.clientHeight ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\r\n                    topScroll = scrollY;\r\n                    top = window.getComputedStyle(document.body).top;\r\n                    addClass(document.body, classes.fixed);\r\n                    document.body.style.top = -scrollY + 'px';\r\n                } else if(!add) {\r\n                    scrollY = topScroll;\r\n                    document.body.style.top = top;\r\n                    removeClass(document.body, classes.fixed);\r\n                    restoreScrollPosition();\r\n                }\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Sets the name of the transition used to show/hide the dialog\r\n         * \r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         */\r\n        function updateTransition(instance, value, oldValue){\r\n            if(typeof oldValue === 'string'){\r\n                removeClass(instance.elements.root,classes.prefix +  oldValue);\r\n            }\r\n            addClass(instance.elements.root, classes.prefix + value);\r\n            reflow = instance.elements.root.offsetWidth;\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog no transition \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateTransitionOff(instance){\r\n            if (instance.get('transitionOff')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.noTransition);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.noTransition);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog display mode\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateDisplayMode(instance){\r\n            if(instance.get('modal')){\r\n\r\n                //make modal\r\n                removeClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    unbindModelessEvents(instance);\r\n\r\n                    //in case a pinned modless dialog was made modal while open.\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }else{\r\n                //make modelss\r\n                addClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    bindModelessEvents(instance);\r\n\r\n                    //in case pin/unpin was called while a modal is open\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog basic view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateBasicMode(instance){\r\n            if (instance.get('basic')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.basic);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.basic);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog frameless view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateFramelessMode(instance){\r\n            if (instance.get('frameless')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.frameless);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.frameless);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n         *\r\n         * @param {Event} event Focus event\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bringToFront(event, instance){\r\n            \r\n            // Do not bring to front if preceeded by an open modal\r\n            var index = openDialogs.indexOf(instance);\r\n            for(var x=index+1;x<openDialogs.length;x+=1){\r\n                if(openDialogs[x].isModal()){\r\n                    return;\r\n                }\r\n            }\r\n\t\t\t\r\n            // Bring to front by making it the last child.\r\n            if(document.body.lastChild !== instance.elements.root){\r\n                document.body.appendChild(instance.elements.root);\r\n                //also make sure its at the end of the list\r\n                openDialogs.splice(openDialogs.indexOf(instance),1);\r\n                openDialogs.push(instance);\r\n                setFocus(instance);\r\n            }\r\n\t\t\t\r\n            return false;\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{undefined}\t\r\n         */\r\n        function optionUpdated(instance, option, oldValue, newValue){\r\n            switch(option){\r\n            case 'title':\r\n                instance.setHeader(newValue);\r\n                break;\r\n            case 'modal':\r\n                updateDisplayMode(instance);\r\n                break;\r\n            case 'basic':\r\n                updateBasicMode(instance);\r\n                break;\r\n            case 'frameless':\r\n                updateFramelessMode(instance);\r\n                break;\r\n            case 'pinned':\r\n                updatePinned(instance);\r\n                break;\r\n            case 'closable':\r\n                updateClosable(instance);\r\n                break;\r\n            case 'maximizable':\r\n                updateMaximizable(instance);\r\n                break;\r\n            case 'pinnable':\r\n                updatePinnable(instance);\r\n                break;\r\n            case 'movable':\r\n                updateMovable(instance);\r\n                break;\r\n            case 'resizable':\r\n                updateResizable(instance);\r\n                break;\r\n            case 'padding':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noPadding);\r\n                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){\r\n                    addClass(instance.elements.root, classes.noPadding);\r\n                }\r\n                break;\r\n            case 'overflow':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noOverflow);\r\n                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){\r\n                    addClass(instance.elements.root, classes.noOverflow);\r\n                }\r\n                break;\r\n            case 'transition':\r\n                updateTransition(instance,newValue, oldValue);\r\n                break;\r\n            case 'transitionOff':\r\n                updateTransitionOff(instance);\r\n                break;\r\n            }\r\n\r\n            // internal on option updated event\r\n            if(typeof instance.hooks.onupdate === 'function'){\r\n                instance.hooks.onupdate.call(instance, option, oldValue, newValue);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Object} obj The object to set/get a value on/from.\r\n         * @param {Function} callback The callback function to call if the key was found.\r\n         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n         * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{Object} result object \r\n         *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n         *\t\tGET: \r\n         *\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t- value: the property value.\r\n         *\t\tSET:\r\n         *\t\t- items: a list of key value pairs of the properties being set.\r\n         *\t\t\t\teach contains:\r\n         *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t\t\t\t- key: the property key.\r\n         *\t\t\t\t\t- value: the property value.\r\n         */\r\n        function update(instance, obj, callback, key, value){\r\n            var result = {op:undefined, items: [] };\r\n            if(typeof value === 'undefined' && typeof key === 'string') {\r\n                //get\r\n                result.op = 'get';\r\n                if(obj.hasOwnProperty(key)){\r\n                    result.found = true;\r\n                    result.value = obj[key];\r\n                }else{\r\n                    result.found = false;\r\n                    result.value = undefined;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                var old;\r\n                //set\r\n                result.op = 'set';\r\n                if(typeof key === 'object'){\r\n                    //set multiple\r\n                    var args = key;\r\n                    for (var prop in args) {\r\n                        if (obj.hasOwnProperty(prop)) {\r\n                            if(obj[prop] !== args[prop]){\r\n                                old = obj[prop];\r\n                                obj[prop] = args[prop];\r\n                                callback.call(instance,prop, old, args[prop]);\r\n                            }\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});\r\n                        }else{\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});\r\n                        }\r\n                    }\r\n                } else if (typeof key === 'string'){\r\n                    //set single\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        if(obj[key] !== value){\r\n                            old  = obj[key];\r\n                            obj[key] = value;\r\n                            callback.call(instance,key, old, value);\r\n                        }\r\n                        result.items.push({'key': key, 'value': value , 'found':true});\r\n\r\n                    }else{\r\n                        result.items.push({'key': key, 'value': value , 'found':false});\r\n                    }\r\n                } else {\r\n                    //invalid params\r\n                    throw new Error('args must be a string or object');\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n        /**\r\n         * Triggers a close event.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function triggerClose(instance) {\r\n            var found;\r\n            triggerCallback(instance, function (button) {\r\n                return found = instance.get('invokeOnCloseOff') !== true && (button.invokeOnClose === true);\r\n            });\r\n            //none of the buttons registered as onclose callback\r\n            //close the dialog\r\n            if (!found && instance.isOpen()) {\r\n                instance.close();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Dialogs commands event handler, attached to the dialog commands element.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function commandsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            switch (target) {\r\n            case instance.elements.commands.pin:\r\n                if (!instance.isPinned()) {\r\n                    pin(instance);\r\n                } else {\r\n                    unpin(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.maximize:\r\n                if (!instance.isMaximized()) {\r\n                    maximize(instance);\r\n                } else {\r\n                    restore(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.close:\r\n                triggerClose(instance);\r\n                break;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper: pins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dialog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function pin(instance) {\r\n            //pin the dialog\r\n            instance.set('pinned', true);\r\n        }\r\n\r\n        /**\r\n         * Helper: unpins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function unpin(instance) {\r\n            //unpin the dialog \r\n            instance.set('pinned', false);\r\n        }\r\n\r\n\r\n        /**\r\n         * Helper: enlarges the dialog to fill the entire screen.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function maximize(instance) {\r\n            // allow custom `onmaximize` method\r\n            dispatchEvent('onmaximize', instance);\r\n            //maximize the dialog \r\n            addClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onmaximized` method\r\n            dispatchEvent('onmaximized', instance);\r\n        }\r\n\r\n        /**\r\n         * Helper: returns the dialog to its former size.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function restore(instance) {\r\n            // allow custom `onrestore` method\r\n            dispatchEvent('onrestore', instance);\r\n            //maximize the dialog \r\n            removeClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onrestored` method\r\n            dispatchEvent('onrestored', instance);\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinnable(instance) {\r\n            if (instance.get('pinnable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.pinnable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.pinnable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper: Fixes the absolutly positioned modal div position.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function addAbsPositionFix(instance) {\r\n            var scrollLeft = getScrollLeft();\r\n            instance.elements.modal.style.marginTop = getScrollTop() + 'px';\r\n            instance.elements.modal.style.marginLeft = scrollLeft + 'px';\r\n            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';\r\n        }\r\n\r\n        /**\r\n         * Helper: Removes the absolutly positioned modal div position fix.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function removeAbsPositionFix(instance) {\r\n            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\r\n            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\r\n            instance.elements.modal.style.marginTop = '';\r\n            instance.elements.modal.style.marginLeft = '';\r\n            instance.elements.modal.style.marginRight = '';\r\n\r\n            if (instance.isOpen()) {\r\n                var top = 0,\r\n                    left = 0\r\n                ;\r\n                if (instance.elements.dialog.style.top !== '') {\r\n                    top = parseInt(instance.elements.dialog.style.top, 10);\r\n                }\r\n                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';\r\n\r\n                if (instance.elements.dialog.style.left !== '') {\r\n                    left = parseInt(instance.elements.dialog.style.left, 10);\r\n                }\r\n                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';\r\n            }\r\n        }\r\n        /**\r\n         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateAbsPositionFix(instance) {\r\n            // if modeless and unpinned add fix\r\n            if (!instance.get('modal') && !instance.get('pinned')) {\r\n                addAbsPositionFix(instance);\r\n            } else {\r\n                removeAbsPositionFix(instance);\r\n            }\r\n        }\r\n        /**\r\n         * Toggles the dialog position lock | modeless only.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to make it modal, false otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinned(instance) {\r\n            if (instance.get('pinned')) {\r\n                removeClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen()) {\r\n                    removeAbsPositionFix(instance);\r\n                }\r\n            } else {\r\n                addClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen() && !instance.isModal()) {\r\n                    addAbsPositionFix(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMaximizable(instance) {\r\n            if (instance.get('maximizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.maximizable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.maximizable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the close box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateClosable(instance) {\r\n            if (instance.get('closable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.closable);\r\n                bindClosableEvents(instance);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.closable);\r\n                unbindClosableEvents(instance);\r\n            }\r\n        }\r\n\r\n        \r\n        var cancelClick = false,// flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\r\n            modalClickHandlerTS=0 // stores last click timestamp to prevent executing the handler twice on double click.\r\n            ;\r\n\r\n        /**\r\n         * Helper: closes the modal dialog when clicking the modal\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function modalClickHandler(event, instance) {\r\n            if(event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick){\r\n                var target = event.srcElement || event.target;\r\n                if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\r\n                    triggerClose(instance);\r\n                }\r\n            }\r\n            cancelClick = false;\r\n        }\r\n\r\n        // stores last call timestamp to prevent triggering the callback twice.\r\n        var callbackTS = 0;\r\n        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\r\n        var cancelKeyup = false;\r\n        /** \r\n         * Helper: triggers a button callback\r\n         *\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * @param {Function}\tCallback to check which button triggered the event.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function triggerCallback(instance, check) {\r\n            if(Date.now() - callbackTS > 200 && (callbackTS = Date.now())){\r\n                for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\r\n                    var button = instance.__internal.buttons[idx];\r\n                    if (!button.element.disabled && check(button)) {\r\n                        var closeEvent = createCloseEvent(idx, button);\r\n                        if (typeof instance.callback === 'function') {\r\n                            instance.callback.apply(instance, [closeEvent]);\r\n                        }\r\n                        //close the dialog only if not canceled.\r\n                        if (closeEvent.cancel === false) {\r\n                            instance.close();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clicks event handler, attached to the dialog footer.\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function buttonsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            triggerCallback(instance, function (button) {\r\n                // if this button caused the click, cancel keyup event\r\n                return button.element === target && (cancelKeyup = true);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Keyup event handler, attached to the document.body\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function keyupHandler(event) {\r\n            //hitting enter while button has focus will trigger keyup too.\r\n            //ignore if handled by clickHandler\r\n            if (cancelKeyup) {\r\n                cancelKeyup = false;\r\n                return;\r\n            }\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\r\n                triggerClose(instance);\r\n                return false;\r\n            }else if (usedKeys.indexOf(keyCode) > -1) {\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        /**\r\n        * Keydown event handler, attached to the document.body\r\n        *\r\n        * @param {Event}\t\tDOM event object.\r\n        * @param {Object}\t\tThe dilog instance.\r\n        * \r\n        * @return {undefined}\r\n        */\r\n        function keydownHandler(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\r\n                var buttons = instance.__internal.buttons;\r\n                for (var x = 0; x < buttons.length; x += 1) {\r\n                    if (document.activeElement === buttons[x].element) {\r\n                        switch (keyCode) {\r\n                        case keys.LEFT:\r\n                            buttons[(x || buttons.length) - 1].element.focus();\r\n                            return;\r\n                        case keys.RIGHT:\r\n                            buttons[(x + 1) % buttons.length].element.focus();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Sets focus to proper dialog element\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function setFocus(instance, resetTarget) {\r\n            // reset target has already been determined.\r\n            if (resetTarget) {\r\n                resetTarget.focus();\r\n            } else {\r\n                // current instance focus settings\r\n                var focus = instance.__internal.focus;\r\n                // the focus element.\r\n                var element = focus.element;\r\n\r\n                switch (typeof focus.element) {\r\n                // a number means a button index\r\n                case 'number':\r\n                    if (instance.__internal.buttons.length > focus.element) {\r\n                        //in basic view, skip focusing the buttons.\r\n                        if (instance.get('basic') === true) {\r\n                            element = instance.elements.reset[0];\r\n                        } else {\r\n                            element = instance.__internal.buttons[focus.element].element;\r\n                        }\r\n                    }\r\n                    break;\r\n                // a string means querySelector to select from dialog body contents.\r\n                case 'string':\r\n                    element = instance.elements.body.querySelector(focus.element);\r\n                    break;\r\n                // a function should return the focus element.\r\n                case 'function':\r\n                    element = focus.element.call(instance);\r\n                    break;\r\n                }\r\n\r\n                // if no focus element, default to first reset element.\r\n                if (instance.get('defaultFocusOff') === true || ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0)) {\r\n                    element = instance.elements.reset[0];\r\n                }\r\n                // focus\r\n                if (element && element.focus) {\r\n                    element.focus();\r\n                    // if selectable\r\n                    if (focus.select && element.select) {\r\n                        element.select();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Focus event handler, attached to document.body and dialogs own reset links.\r\n         * handles the focus for modal dialogs only.\r\n         *\r\n         * @param {Event} event DOM focus event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function onReset(event, instance) {\r\n\r\n            // should work on last modal if triggered from document.body \r\n            if (!instance) {\r\n                for (var x = openDialogs.length - 1; x > -1; x -= 1) {\r\n                    if (openDialogs[x].isModal()) {\r\n                        instance = openDialogs[x];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(instance) {\r\n                // if modal\r\n                if (instance.isModal()) {\r\n                    // determine reset target to enable forward/backward tab cycle.\r\n                    var firstReset = instance.elements.reset[0],\r\n                        lastReset = instance.elements.reset[1],\r\n                        lastFocusedElement = event.relatedTarget,\r\n                        within = instance.elements.root.contains(lastFocusedElement),\r\n                        target = event.srcElement || event.target,\r\n                        resetTarget;\r\n\r\n                    //if the previous focused element element was outside the modal do nthing\r\n                    if(  /*first show */\r\n                        (target === firstReset && !within) ||\r\n                         /*focus cycle */\r\n                        (target === lastReset && lastFocusedElement === firstReset)){\r\n                        return;\r\n                    }else if(target === lastReset || target === document.body){\r\n                        resetTarget = firstReset;\r\n                    }else if(target === firstReset && lastFocusedElement === lastReset){\r\n                        resetTarget = findTabbable(instance);\r\n                    }else if(target === firstReset && within){\r\n                        resetTarget = findTabbable(instance, true);\r\n                    }\r\n                    // focus\r\n                    setFocus(instance, resetTarget);\r\n                }\r\n            }\r\n        }\r\n        function findTabbable(instance, last){\r\n            var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\r\n            if(last){\r\n                tabbables.reverse();\r\n            }\r\n            for(var x=0;x<tabbables.length;x+=1){\r\n                var tabbable = tabbables[x];\r\n                //check if visible\r\n                if(!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)){\r\n                    return tabbable;\r\n                }\r\n            }\r\n        }\r\n        function recycleTab(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            if (instance && event.shiftKey && event.keyCode === keys.TAB) {\r\n                instance.elements.reset[1].focus();\r\n            }\r\n        }\r\n        /**\r\n         * Transition in transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionInEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerIn);\r\n\r\n            // once transition is complete, set focus\r\n            setFocus(instance);\r\n\r\n            // allow handling key up after transition ended.\r\n            cancelKeyup = false;\r\n\r\n            // allow custom `onfocus` method\r\n            dispatchEvent('onfocus', instance);\r\n\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            removeClass(instance.elements.root, classes.animationIn);\r\n        }\r\n\r\n        /**\r\n         * Transition out transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionOutEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerOut);\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // reset move updates\r\n            resetMove(instance);\r\n            // reset resize updates\r\n            resetResize(instance);\r\n\r\n            // restore if maximized\r\n            if (instance.isMaximized() && !instance.get('startMaximized')) {\r\n                restore(instance);\r\n            }\r\n\r\n            //destory the instance\r\n            if (typeof instance.__internal.destroy === 'function') {\r\n                instance.__internal.destroy.apply(instance);\r\n            }\r\n        }\r\n        /* Controls moving a dialog around */\r\n        //holde the current moving instance\r\n        var movable = null,\r\n            //holds the current X offset when move starts\r\n            offsetX = 0,\r\n            //holds the current Y offset when move starts\r\n            offsetY = 0,\r\n            xProp = 'pageX',\r\n            yProp = 'pageY',\r\n            bounds = null,\r\n            refreshTop = false,\r\n            moveDelegate = null\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element top/left coordinates\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElement(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n           \r\n            element.style.left = left + 'px';\r\n            element.style.top = top + 'px';\r\n           \r\n        }\r\n        /**\r\n         * Helper: sets the element top/left coordinates within screen bounds\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElementBounded(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n            \r\n            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\r\n            if(refreshTop){\r\n                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\r\n            }else{\r\n                element.style.top = Math.max(bounds.minTop, top) + 'px';\r\n            }\r\n        }\r\n            \r\n\r\n        /**\r\n         * Triggers the start of a move event, attached to the header element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginMove(event, instance) {\r\n            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\r\n                var eventSrc, left=0, top=0;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                    xProp = 'clientX';\r\n                    yProp = 'clientY';\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n\r\n                if (eventSrc) {\r\n\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n\r\n                    if (element.style.left) {\r\n                        left = parseInt(element.style.left, 10);\r\n                    }\r\n\r\n                    if (element.style.top) {\r\n                        top = parseInt(element.style.top, 10);\r\n                    }\r\n                    \r\n                    offsetX = eventSrc[xProp] - left;\r\n                    offsetY = eventSrc[yProp] - top;\r\n\r\n                    if(instance.isModal()){\r\n                        offsetY += instance.elements.modal.scrollTop;\r\n                    }else if(instance.isPinned()){\r\n                        offsetY -= document.body.scrollTop;\r\n                    }\r\n                    \r\n                    if(instance.get('moveBounded')){\r\n                        var current = element,\r\n                            offsetLeft = -left,\r\n                            offsetTop = -top;\r\n                        \r\n                        //calc offset\r\n                        do {\r\n                            offsetLeft += current.offsetLeft;\r\n                            offsetTop += current.offsetTop;\r\n                        } while (current = current.offsetParent);\r\n                        \r\n                        bounds = {\r\n                            maxLeft : offsetLeft,\r\n                            minLeft : -offsetLeft,\r\n                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,\r\n                            minTop  : -offsetTop\r\n                        };\r\n                        moveDelegate = moveElementBounded;\r\n                    }else{\r\n                        bounds = null;\r\n                        moveDelegate = moveElement;\r\n                    }\r\n                    \r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', instance);\r\n\r\n                    refreshTop = !instance.isModal() && instance.isPinned();\r\n                    movable = instance;\r\n                    moveDelegate(eventSrc, element);\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual move handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function move(event) {\r\n            if (movable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    moveDelegate(eventSrc, movable.elements.dialog);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a move event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endMove() {\r\n            if (movable) {\r\n                var instance = movable;\r\n                movable = bounds = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                // allow custom `onmoved` method\r\n                dispatchEvent('onmoved', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by moving the element to its original state,\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetMove(instance) {\r\n            movable = null;\r\n            var element = instance.elements.dialog;\r\n            element.style.left = element.style.top = '';\r\n        }\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMovable(instance) {\r\n            if (instance.get('movable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    bindMovableEvents(instance);\r\n                }\r\n            } else {\r\n\r\n                //reset\r\n                resetMove(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    unbindMovableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Controls moving a dialog around */\r\n        //holde the current instance being resized\t\t\r\n        var resizable = null,\r\n            //holds the staring left offset when resize starts.\r\n            startingLeft = Number.Nan,\r\n            //holds the staring width when resize starts.\r\n            startingWidth = 0,\r\n            //holds the initial width when resized for the first time.\r\n            minWidth = 0,\r\n            //holds the offset of the resize handle.\r\n            handleOffset = 0\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n         *\r\n         * @param {Event} event\tDOM mousemove event object.\r\n         * @param {Node} element The element being moved.\r\n         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resizeElement(event, element, pageRelative) {\r\n\r\n            //calculate offsets from 0,0\r\n            var current = element;\r\n            var offsetLeft = 0;\r\n            var offsetTop = 0;\r\n            do {\r\n                offsetLeft += current.offsetLeft;\r\n                offsetTop += current.offsetTop;\r\n            } while (current = current.offsetParent);\r\n\r\n            // determine X,Y coordinates.\r\n            var X, Y;\r\n            if (pageRelative === true) {\r\n                X = event.pageX;\r\n                Y = event.pageY;\r\n            } else {\r\n                X = event.clientX;\r\n                Y = event.clientY;\r\n            }\r\n            // rtl handling\r\n            var isRTL = isRightToLeft();\r\n            if (isRTL) {\r\n                // reverse X \r\n                X = document.body.offsetWidth - X;\r\n                // if has a starting left, calculate offsetRight\r\n                if (!isNaN(startingLeft)) {\r\n                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\r\n                }\r\n            }\r\n\r\n            // set width/height\r\n            element.style.height = (Y - offsetTop + handleOffset) + 'px';\r\n            element.style.width = (X - offsetLeft + handleOffset) + 'px';\r\n\r\n            // if the element being resized has a starting left, maintain it.\r\n            // the dialog is centered, divide by half the offset to maintain the margins.\r\n            if (!isNaN(startingLeft)) {\r\n                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\r\n                if (isRTL) {\r\n                    //negate the diff, why?\r\n                    //when growing it should decrease left\r\n                    //when shrinking it should increase left\r\n                    diff *= -1;\r\n                }\r\n                if (element.offsetWidth > startingWidth) {\r\n                    //growing\r\n                    element.style.left = (startingLeft + diff) + 'px';\r\n                } else if (element.offsetWidth >= minWidth) {\r\n                    //shrinking\r\n                    element.style.left = (startingLeft - diff) + 'px';\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginResize(event, instance) {\r\n            if (!instance.isMaximized()) {\r\n                var eventSrc;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', instance);\r\n                    \r\n                    resizable = instance;\r\n                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n                    startingLeft = parseInt(element.style.left, 10);\r\n                    element.style.height = element.offsetHeight + 'px';\r\n                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = (startingWidth = element.offsetWidth) + 'px';\r\n\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual resize handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resize(event) {\r\n            if (resizable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endResize() {\r\n            if (resizable) {\r\n                var instance = resizable;\r\n                resizable = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                cancelClick = true;\r\n                // allow custom `onresized` method\r\n                dispatchEvent('onresized', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by resizing the element to its original state.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetResize(instance) {\r\n            resizable = null;\r\n            var element = instance.elements.dialog;\r\n            if (element.style.maxWidth === 'none') {\r\n                //clear inline styles.\r\n                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\r\n                //reset variables.\r\n                startingLeft = Number.Nan;\r\n                startingWidth = minWidth = handleOffset = 0;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateResizable(instance) {\r\n            if (instance.get('resizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    bindResizableEvents(instance);\r\n                }\r\n            } else {\r\n                //reset\r\n                resetResize(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    unbindResizableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reset move/resize on window resize.\r\n         *\r\n         * @param {Event} event\twindow resize event object.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function windowResize(/*event*/) {\r\n            for (var x = 0; x < openDialogs.length; x += 1) {\r\n                var instance = openDialogs[x];\r\n                if (instance.get('autoReset')) {\r\n                    resetMove(instance);\r\n                    resetResize(instance);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Bind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindEvents(instance) {\r\n            // if first dialog, hook global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                on(window, 'resize', windowResize);\r\n                on(document.body, 'keyup', keyupHandler);\r\n                on(document.body, 'keydown', keydownHandler);\r\n                on(document.body, 'focus', onReset);\r\n\r\n                //move\r\n                on(document.documentElement, 'mousemove', move);\r\n                on(document.documentElement, 'touchmove', move, false, false);\r\n                on(document.documentElement, 'mouseup', endMove);\r\n                on(document.documentElement, 'touchend', endMove);\r\n                //resize\r\n                on(document.documentElement, 'mousemove', resize);\r\n                on(document.documentElement, 'touchmove', resize, false, false);\r\n                on(document.documentElement, 'mouseup', endResize);\r\n                on(document.documentElement, 'touchend', endResize);\r\n            }\r\n\r\n            // common events\r\n            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            on(instance.elements.reset[0], 'keydown', recycleTab);\r\n            on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            //prevent handling key up when dialog is being opened by a key stroke.\r\n            cancelKeyup = true;\r\n            // hook in transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                bindModelessEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                bindResizableEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                bindMovableEvents(instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Unbind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindEvents(instance) {\r\n            // if last dialog, remove global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                off(window, 'resize', windowResize);\r\n                off(document.body, 'keyup', keyupHandler);\r\n                off(document.body, 'keydown', keydownHandler);\r\n                off(document.body, 'focus', onReset);\r\n                //move\r\n                off(document.documentElement, 'mousemove', move);\r\n                off(document.documentElement, 'mouseup', endMove);\r\n                //resize\r\n                off(document.documentElement, 'mousemove', resize);\r\n                off(document.documentElement, 'mouseup', endResize);\r\n            }\r\n\r\n            // common events\r\n            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            off(instance.elements.reset[0], 'keydown', recycleTab);\r\n            off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            // hook out transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                unbindModelessEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                unbindMovableEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                unbindResizableEvents(instance);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Bind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindModelessEvents(instance) {\r\n            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n        /**\r\n         * Unbind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindModelessEvents(instance) {\r\n            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindMovableEvents(instance) {\r\n            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindMovableEvents(instance) {\r\n            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindResizableEvents(instance) {\r\n            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindResizableEvents(instance) {\r\n            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Bind closable events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindClosableEvents(instance) {\r\n            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind closable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindClosableEvents(instance) {\r\n            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n        // dialog API\r\n        return {\r\n            __init:initialize,\r\n            /**\r\n             * Check if dialog is currently open\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isOpen: function () {\r\n                return this.__internal.isOpen;\r\n            },\r\n            isModal: function (){\r\n                return this.elements.root.className.indexOf(classes.modeless) < 0;\r\n            },\r\n            isMaximized:function(){\r\n                return this.elements.root.className.indexOf(classes.maximized) > -1;\r\n            },\r\n            isPinned:function(){\r\n                return this.elements.root.className.indexOf(classes.unpinned) < 0;\r\n            },\r\n            maximize:function(){\r\n                if(!this.isMaximized()){\r\n                    maximize(this);\r\n                }\r\n                return this;\r\n            },\r\n            restore:function(){\r\n                if(this.isMaximized()){\r\n                    restore(this);\r\n                }\r\n                return this;\r\n            },\r\n            pin:function(){\r\n                if(!this.isPinned()){\r\n                    pin(this);\r\n                }\r\n                return this;\r\n            },\r\n            unpin:function(){\r\n                if(this.isPinned()){\r\n                    unpin(this);\r\n                }\r\n                return this;\r\n            },\r\n            bringToFront:function(){\r\n                bringToFront(null, this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Move the dialog to a specific x/y coordinates\r\n             *\r\n             * @param {Number} x    The new dialog x coordinate in pixels.\r\n             * @param {Number} y    The new dialog y coordinate in pixels.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            moveTo:function(x,y){\r\n                if(!isNaN(x) && !isNaN(y)){\r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', this);\r\n                    \r\n                    var element = this.elements.dialog,\r\n                        current = element,\r\n                        offsetLeft = 0,\r\n                        offsetTop = 0;\r\n                    \r\n                    //subtract existing left,top\r\n                    if (element.style.left) {\r\n                        offsetLeft -= parseInt(element.style.left, 10);\r\n                    }\r\n                    if (element.style.top) {\r\n                        offsetTop -= parseInt(element.style.top, 10);\r\n                    }\r\n                    //calc offset\r\n                    do {\r\n                        offsetLeft += current.offsetLeft;\r\n                        offsetTop += current.offsetTop;\r\n                    } while (current = current.offsetParent);\r\n\r\n                    //calc left, top\r\n                    var left = (x - offsetLeft);\r\n                    var top  = (y - offsetTop);\r\n\r\n                    //// rtl handling\r\n                    if (isRightToLeft()) {\r\n                        left *= -1;\r\n                    }\r\n\r\n                    element.style.left = left + 'px';\r\n                    element.style.top = top + 'px';\r\n                    \r\n                    // allow custom `onmoved` method\r\n                    dispatchEvent('onmoved', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n             * The dialog can be resized to:\r\n             *  A minimum width equal to the initial display width\r\n             *  A minimum height equal to the sum of header/footer heights.\r\n             *\r\n             *\r\n             * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n             * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            resizeTo:function(width,height){\r\n                var w = parseFloat(width),\r\n                    h = parseFloat(height),\r\n                    regex = /(\\d*\\.\\d+|\\d+)%/\r\n                ;\r\n\r\n                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){\r\n                    \r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', this);\r\n                    \r\n                    if(('' + width).match(regex)){\r\n                        w = w / 100 * document.documentElement.clientWidth ;\r\n                    }\r\n\r\n                    if(('' + height).match(regex)){\r\n                        h = h / 100 * document.documentElement.clientHeight;\r\n                    }\r\n\r\n                    var element = this.elements.dialog;\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = w + 'px';\r\n                    element.style.height = h + 'px';\r\n                    \r\n                    // allow custom `onresized` method\r\n                    dispatchEvent('onresized', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options \r\n             *\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting : function (key, value) {\r\n                var self = this;\r\n                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);\r\n                if(result.op === 'get'){\r\n                    if(result.found){\r\n                        return result.value;\r\n                    }else if(typeof this.settings !== 'undefined'){\r\n                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;\r\n                    }else{\r\n                        return undefined;\r\n                    }\r\n                }else if(result.op === 'set'){\r\n                    if(result.items.length > 0){\r\n                        var callback = this.settingUpdated || function(){};\r\n                        for(var x=0;x<result.items.length;x+=1){\r\n                            var item = result.items[x];\r\n                            if(!item.found && typeof this.settings !== 'undefined'){\r\n                                update(this, this.settings, callback, item.key, item.value);\r\n                            }\r\n                        }\r\n                    }\r\n                    return this;\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set:function(key, value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n            * Sets dialog header\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setHeader:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n            * Sets dialog contents\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setContent:function(content){\r\n                if(typeof content === 'string'){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Show the dialog as modal\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            showModal: function(className){\r\n                return this.show(true, className);\r\n            },\r\n            /**\r\n             * Show the dialog\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            show: function (modal, className) {\r\n                \r\n                // ensure initialization\r\n                initialize(this);\r\n\r\n                if ( !this.__internal.isOpen ) {\r\n\r\n                    // add to open dialogs\r\n                    this.__internal.isOpen = true;\r\n                    openDialogs.push(this);\r\n\r\n                    // save last focused element\r\n                    if(alertify.defaults.maintainFocus){\r\n                        this.__internal.activeElement = document.activeElement;\r\n                    }\r\n\r\n                    // set tabindex attribute on body element this allows script to give it focusable\r\n                    if(!document.body.hasAttribute('tabindex')) {\r\n                        document.body.setAttribute( 'tabindex', tabindex = '0');\r\n                    }\r\n\r\n                    //allow custom dom manipulation updates before showing the dialog.\r\n                    if(typeof this.prepare === 'function'){\r\n                        this.prepare();\r\n                    }\r\n\r\n                    bindEvents(this);\r\n\r\n                    if(modal !== undefined){\r\n                        this.set('modal', modal);\r\n                    }\r\n\r\n                    //save scroll to prevent document jump\r\n                    saveScrollPosition();\r\n\r\n                    ensureNoOverflow();\r\n\r\n                    // allow custom dialog class on show\r\n                    if(typeof className === 'string' && className !== ''){\r\n                        this.__internal.className = className;\r\n                        addClass(this.elements.root, className);\r\n                    }\r\n\r\n                    // maximize if start maximized\r\n                    if ( this.get('startMaximized')) {\r\n                        this.maximize();\r\n                    }else if(this.isMaximized()){\r\n                        restore(this);\r\n                    }\r\n\r\n                    updateAbsPositionFix(this);\r\n                    this.elements.root.removeAttribute('style');\r\n                    removeClass(this.elements.root, classes.animationOut);\r\n                    addClass(this.elements.root, classes.animationIn);\r\n\r\n                    // set 1s fallback in case transition event doesn't fire\r\n                    clearTimeout( this.__internal.timerIn);\r\n                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );\r\n\r\n                    if(isSafari){\r\n                        // force desktop safari reflow\r\n                        var root = this.elements.root;\r\n                        root.style.display  = 'none';\r\n                        setTimeout(function(){root.style.display  = 'block';}, 0);\r\n                    }\r\n\r\n                    //reflow\r\n                    reflow = this.elements.root.offsetWidth;\r\n                  \r\n                    // show dialog\r\n                    removeClass(this.elements.root, classes.hidden);\r\n\r\n                    //restore scroll to prevent document jump\r\n                    restoreScrollPosition();\r\n\r\n                    // internal on show event\r\n                    if(typeof this.hooks.onshow === 'function'){\r\n                        this.hooks.onshow.call(this);\r\n                    }\r\n\r\n                    // allow custom `onshow` method\r\n                    dispatchEvent('onshow', this);\r\n\r\n                }else{\r\n                    // reset move updates\r\n                    resetMove(this);\r\n                    // reset resize updates\r\n                    resetResize(this);\r\n                    // shake the dialog to indicate its already open\r\n                    addClass(this.elements.dialog, classes.shake);\r\n                    var self = this;\r\n                    setTimeout(function(){\r\n                        removeClass(self.elements.dialog, classes.shake);\r\n                    },200);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close the dialog\r\n             *\r\n             * @return {Object} The dialog instance\r\n             */\r\n            close: function () {\r\n                if (this.__internal.isOpen ) {\r\n                    // custom `onclosing` event\r\n                    if(dispatchEvent('onclosing', this) !== false){\r\n\r\n                        unbindEvents(this);\r\n\r\n                        removeClass(this.elements.root, classes.animationIn);\r\n                        addClass(this.elements.root, classes.animationOut);\r\n\r\n                        // set 1s fallback in case transition event doesn't fire\r\n                        clearTimeout( this.__internal.timerOut );\r\n                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );\r\n                        // hide dialog\r\n                        addClass(this.elements.root, classes.hidden);\r\n                        //reflow\r\n                        reflow = this.elements.modal.offsetWidth;\r\n\r\n                        // return focus to the last active element\r\n                        if (alertify.defaults.maintainFocus && this.__internal.activeElement) {\r\n                            this.__internal.activeElement.focus();\r\n                            this.__internal.activeElement = null;\r\n                        }\r\n\r\n                        // remove custom dialog class on hide\r\n                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\r\n                            removeClass(this.elements.root, this.__internal.className);\r\n                        }\r\n\r\n                        // internal on close event\r\n                        if(typeof this.hooks.onclose === 'function'){\r\n                            this.hooks.onclose.call(this);\r\n                        }\r\n\r\n                        // allow custom `onclose` method\r\n                        dispatchEvent('onclose', this);\r\n\r\n                        //remove from open dialogs\r\n                        openDialogs.splice(openDialogs.indexOf(this),1);\r\n                        this.__internal.isOpen = false;\r\n\r\n                        ensureNoOverflow();\r\n                    }\r\n\r\n                }\r\n                // last dialog and tab index was set by us, remove it.\r\n                if(!openDialogs.length && tabindex === '0'){\r\n                    document.body.removeAttribute('tabindex');\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close all open dialogs except this.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeOthers:function(){\r\n                alertify.closeAll(this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Destroys this dialog instance\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            destroy:function(){\r\n                if(this.__internal) {\r\n                    if (this.__internal.isOpen ) {\r\n                        //mark dialog for destruction, this will be called on tranistionOut event.\r\n                        this.__internal.destroy = function(){\r\n                            destruct(this, initialize);\r\n                        };\r\n                        //close the dialog to unbind all events.\r\n                        this.close();\r\n                    }else if(!this.__internal.destroy){\r\n                        destruct(this, initialize);\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n\t} () );\r\n    var notifier = (function () {\r\n        var reflow,\r\n            element,\r\n            openInstances = [],\r\n            classes = defaults.notifier.classes,\r\n            baseClass = classes.base;\r\n        /**\r\n         * Helper: initializes the notifier instance\r\n         *\r\n         */\r\n        function initialize(instance) {\r\n\r\n            if (!instance.__internal) {\r\n                instance.__internal = {\r\n                    position: alertify.defaults.notifier.position,\r\n                    delay: alertify.defaults.notifier.delay,\r\n                };\r\n\r\n                element = document.createElement('DIV');\r\n                var transitionOff = 'transitionOff' in defaults.notifier ? defaults.notifier.transitionOff : defaults.transitionOff;\r\n                if(transitionOff){\r\n                    baseClass = classes.base + ' ajs-no-transition';\r\n                }\r\n                updatePosition(instance);\r\n            }\r\n\r\n            //add to DOM tree.\r\n            if (element.parentNode !== document.body) {\r\n                document.body.appendChild(element);\r\n            }\r\n        }\r\n\r\n        function pushInstance(instance) {\r\n            instance.__internal.pushed = true;\r\n            openInstances.push(instance);\r\n        }\r\n        function popInstance(instance) {\r\n            openInstances.splice(openInstances.indexOf(instance), 1);\r\n            instance.__internal.pushed = false;\r\n        }\r\n        /**\r\n         * Helper: update the notifier instance position\r\n         *\r\n         */\r\n        function updatePosition(instance) {\r\n            element.className = baseClass;\r\n            switch (instance.__internal.position) {\r\n            case 'top-right':\r\n                addClass(element, classes.top + ' ' + classes.right);\r\n                break;\r\n            case 'top-left':\r\n                addClass(element, classes.top + ' ' + classes.left);\r\n                break;\r\n            case 'top-center':\r\n                addClass(element, classes.top + ' ' + classes.center);\r\n                break;\r\n            case 'bottom-left':\r\n                addClass(element, classes.bottom + ' ' + classes.left);\r\n                break;\r\n            case 'bottom-center':\r\n                addClass(element, classes.bottom + ' ' + classes.center);\r\n                break;\r\n\r\n            default:\r\n            case 'bottom-right':\r\n                addClass(element, classes.bottom + ' ' + classes.right);\r\n                break;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * creates a new notification message\r\n        *\r\n        * @param  {DOMElement} message\tThe notifier message element\r\n        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n        * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n        *\r\n        * @return {undefined}\r\n        */\r\n        function create(div, callback) {\r\n\r\n            function clickDelegate(event, instance) {\r\n                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){\r\n                    instance.dismiss(true);\r\n                }\r\n            }\r\n\r\n            function transitionDone(event, instance) {\r\n                // unbind event\r\n                off(instance.element, transition.type, transitionDone);\r\n                // remove the message\r\n                element.removeChild(instance.element);\r\n            }\r\n\r\n            function initialize(instance) {\r\n                if (!instance.__internal) {\r\n                    instance.__internal = {\r\n                        pushed: false,\r\n                        delay : undefined,\r\n                        timer: undefined,\r\n                        clickHandler: undefined,\r\n                        transitionEndHandler: undefined,\r\n                        transitionTimeout: undefined\r\n                    };\r\n                    instance.__internal.clickHandler = delegate(instance, clickDelegate);\r\n                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\r\n                }\r\n                return instance;\r\n            }\r\n            function clearTimers(instance) {\r\n                clearTimeout(instance.__internal.timer);\r\n                clearTimeout(instance.__internal.transitionTimeout);\r\n            }\r\n            return initialize({\r\n                /* notification DOM element*/\r\n                element: div,\r\n                /*\r\n                 * Pushes a notification message\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                push: function (_content, _wait) {\r\n                    if (!this.__internal.pushed) {\r\n\r\n                        pushInstance(this);\r\n                        clearTimers(this);\r\n\r\n                        var content, wait;\r\n                        switch (arguments.length) {\r\n                        case 0:\r\n                            wait = this.__internal.delay;\r\n                            break;\r\n                        case 1:\r\n                            if (typeof (_content) === 'number') {\r\n                                wait = _content;\r\n                            } else {\r\n                                content = _content;\r\n                                wait = this.__internal.delay;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            content = _content;\r\n                            wait = _wait;\r\n                            break;\r\n                        }\r\n                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;\r\n                        // set contents\r\n                        if (typeof content !== 'undefined') {\r\n                            this.setContent(content);\r\n                        }\r\n                        // append or insert\r\n                        if (notifier.__internal.position.indexOf('top') < 0) {\r\n                            element.appendChild(this.element);\r\n                        } else {\r\n                            element.insertBefore(this.element, element.firstChild);\r\n                        }\r\n                        reflow = this.element.offsetWidth;\r\n                        addClass(this.element, classes.visible);\r\n                        // attach click event\r\n                        on(this.element, 'click', this.__internal.clickHandler);\r\n                        return this.delay(wait);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * {Function} callback function to be invoked before dismissing the notification message.\r\n                 * Remarks: A return value === 'false' will cancel the dismissal\r\n                 *\r\n                 */\r\n                ondismiss: function () { },\r\n                /*\r\n                 * {Function} callback function to be invoked when the message is dismissed.\r\n                 *\r\n                 */\r\n                callback: callback,\r\n                /*\r\n                 * Dismisses the notification message\r\n                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n                 *\r\n                 */\r\n                dismiss: function (clicked) {\r\n                    if (this.__internal.pushed) {\r\n                        clearTimers(this);\r\n                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\r\n                            //detach click event\r\n                            off(this.element, 'click', this.__internal.clickHandler);\r\n                            // ensure element exists\r\n                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\r\n                                //transition end or fallback\r\n                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\r\n                                removeClass(this.element, classes.visible);\r\n\r\n                                // custom callback on dismiss\r\n                                if (typeof this.callback === 'function') {\r\n                                    this.callback.call(this, clicked);\r\n                                }\r\n                            }\r\n                            popInstance(this);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Delays the notification message dismissal\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                delay: function (wait) {\r\n                    clearTimers(this);\r\n                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\r\n                    if (this.__internal.delay > 0) {\r\n                        var  self = this;\r\n                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Sets the notification message contents\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 *\r\n                 */\r\n                setContent: function (content) {\r\n                    if (typeof content === 'string') {\r\n                        clearContents(this.element);\r\n                        this.element.innerHTML = content;\r\n                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\r\n                        clearContents(this.element);\r\n                        this.element.appendChild(content);\r\n                    }\r\n                    if(this.__internal.closeButton){\r\n                        var close = document.createElement('span');\r\n                        addClass(close, classes.close);\r\n                        close.setAttribute('data-close', true);\r\n                        this.element.appendChild(close);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Dismisses all open notifications except this.\r\n                 *\r\n                 */\r\n                dismissOthers: function () {\r\n                    notifier.dismissAll(this);\r\n                    return this;\r\n                }\r\n            });\r\n        }\r\n\r\n        //notifier api\r\n        return {\r\n            /**\r\n             * Gets or Sets notifier settings.\r\n             *\r\n             * @param {string} key The setting name\r\n             * @param {Variant} value The setting value.\r\n             *\r\n             * @return {Object}\tif the called as a setter, return the notifier instance.\r\n             */\r\n            setting: function (key, value) {\r\n                //ensure init\r\n                initialize(this);\r\n\r\n                if (typeof value === 'undefined') {\r\n                    //get\r\n                    return this.__internal[key];\r\n                } else {\r\n                    //set\r\n                    switch (key) {\r\n                    case 'position':\r\n                        this.__internal.position = value;\r\n                        updatePosition(this);\r\n                        break;\r\n                    case 'delay':\r\n                        this.__internal.delay = value;\r\n                        break;\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options\r\n             */\r\n            set:function(key,value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options\r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n             * Creates a new notification message\r\n             *\r\n             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n             * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            create: function (type, callback) {\r\n                //ensure notifier init\r\n                initialize(this);\r\n                //create new notification message\r\n                var div = document.createElement('div');\r\n                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ' + classes.prefix + type : '');\r\n                return create(div, callback);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications.\r\n             *\r\n             * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n             *\r\n             */\r\n            dismissAll: function (except) {\r\n                var clone = openInstances.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var  instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.dismiss();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Alertify public API\r\n     * This contains everything that is exposed through the alertify object.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function Alertify() {\r\n\r\n        // holds a references of created dialogs\r\n        var dialogs = {};\r\n\r\n        /**\r\n         * Extends a given prototype by merging properties from base into sub.\r\n         *\r\n         * @sub {Object} sub The prototype being overwritten.\r\n         * @base {Object} base The prototype being written.\r\n         *\r\n         * @return {Object} The extended prototype.\r\n         */\r\n        function extend(sub, base) {\r\n            // copy dialog pototype over definition.\r\n            for (var prop in base) {\r\n                if (base.hasOwnProperty(prop)) {\r\n                    sub[prop] = base[prop];\r\n                }\r\n            }\r\n            return sub;\r\n        }\r\n\r\n\r\n        /**\r\n        * Helper: returns a dialog instance from saved dialogs.\r\n        * and initializes the dialog if its not already initialized.\r\n        *\r\n        * @name {String} name The dialog name.\r\n        *\r\n        * @return {Object} The dialog instance.\r\n        */\r\n        function get_dialog(name) {\r\n            var dialog = dialogs[name].dialog;\r\n            //initialize the dialog if its not already initialized.\r\n            if (dialog && typeof dialog.__init === 'function') {\r\n                dialog.__init(dialog);\r\n            }\r\n            return dialog;\r\n        }\r\n\r\n        /**\r\n         * Helper:  registers a new dialog definition.\r\n         *\r\n         * @name {String} name The dialog name.\r\n         * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n         * @base {String} base the name of another dialog to inherit from.\r\n         *\r\n         * @return {Object} The dialog definition.\r\n         */\r\n        function register(name, Factory, transient, base) {\r\n            var definition = {\r\n                dialog: null,\r\n                factory: Factory\r\n            };\r\n\r\n            //if this is based on an existing dialog, create a new definition\r\n            //by applying the new protoype over the existing one.\r\n            if (base !== undefined) {\r\n                definition.factory = function () {\r\n                    return extend(new dialogs[base].factory(), new Factory());\r\n                };\r\n            }\r\n\r\n            if (!transient) {\r\n                //create a new definition based on dialog\r\n                definition.dialog = extend(new definition.factory(), dialog);\r\n            }\r\n            return dialogs[name] = definition;\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * Alertify defaults\r\n             * \r\n             * @type {Object}\r\n             */\r\n            defaults: defaults,\r\n            /**\r\n             * Dialogs factory \r\n             *\r\n             * @param {string}      Dialog name.\r\n             * @param {Function}    A Dialog factory function.\r\n             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n             * @param {String}      The name of the base type to inherit from.\r\n             */\r\n            dialog: function (name, Factory, transient, base) {\r\n\r\n                // get request, create a new instance and return it.\r\n                if (typeof Factory !== 'function') {\r\n                    return get_dialog(name);\r\n                }\r\n\r\n                if (this.hasOwnProperty(name)) {\r\n                    throw new Error('alertify.dialog: name already exists');\r\n                }\r\n\r\n                // register the dialog\r\n                var definition = register(name, Factory, transient, base);\r\n\r\n                if (transient) {\r\n\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var instance = extend(new definition.factory(), dialog);\r\n                            //ensure init\r\n                            if (instance && typeof instance.__init === 'function') {\r\n                                instance.__init(instance);\r\n                            }\r\n                            instance['main'].apply(instance, arguments);\r\n                            return instance['show'].apply(instance);\r\n                        }\r\n                    };\r\n                } else {\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //ensure init\r\n                        if (definition.dialog && typeof definition.dialog.__init === 'function') {\r\n                            definition.dialog.__init(definition.dialog);\r\n                        }\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var dialog = definition.dialog;\r\n                            dialog['main'].apply(definition.dialog, arguments);\r\n                            return dialog['show'].apply(definition.dialog);\r\n                        }\r\n                    };\r\n                }\r\n            },\r\n            /**\r\n             * Close all open dialogs.\r\n             *\r\n             * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeAll: function (except) {\r\n                var clone = openDialogs.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.close();\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n             *\r\n             * @param {string} name The dialog name.\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting: function (name, key, value) {\r\n\r\n                if (name === 'notifier') {\r\n                    return notifier.setting(key, value);\r\n                }\r\n\r\n                var dialog = get_dialog(name);\r\n                if (dialog) {\r\n                    return dialog.setting(key, value);\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set: function(name,key,value){\r\n                return this.setting(name, key,value);\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get: function(name, key){\r\n                return this.setting(name, key);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n             * This allows for custom look and feel for various types of notifications.\r\n             *\r\n             * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n             * @param  {String}                 [type='']\t\t\t\tType of log message\r\n             * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            notify: function (message, type, wait, callback) {\r\n                return notifier.create(type, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            message: function (message, wait, callback) {\r\n                return notifier.create(null, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'success'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            success: function (message, wait, callback) {\r\n                return notifier.create('success', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'error'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            error: function (message, wait, callback) {\r\n                return notifier.create('error', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'warning'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            warning: function (message, wait, callback) {\r\n                return notifier.create('warning', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            dismissAll: function () {\r\n                notifier.dismissAll();\r\n            }\r\n        };\r\n    }\r\n    var alertify = new Alertify();\r\n\r\n    /**\r\n    * Alert dialog definition\r\n    *\r\n    * invoked by:\r\n    *\talertify.alert(message);\r\n    *\talertify.alert(title, message);\r\n    *\talertify.alert(message, onok);\r\n    *\talertify.alert(title, message, onok);\r\n     */\r\n    alertify.dialog('alert', function () {\r\n        return {\r\n            main: function (_title, _message, _onok) {\r\n                var title, message, onok;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    if (typeof _message === 'function') {\r\n                        message = _title;\r\n                        onok = _message;\r\n                    } else {\r\n                        title = _title;\r\n                        message = _message;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.ok,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                // nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                onok: undefined,\r\n                label: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'label':\r\n                    if (this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue;\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                if (typeof this.get('onok') === 'function') {\r\n                    var returnValue = this.get('onok').call(this, closeEvent);\r\n                    if (typeof returnValue !== 'undefined') {\r\n                        closeEvent.cancel = !returnValue;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Confirm dialog object\r\n     *\r\n     *\talertify.confirm(message);\r\n     *\talertify.confirm(message, onok);\r\n     *\talertify.confirm(message, onok, oncancel);\r\n     *\talertify.confirm(title, message, onok, oncancel);\r\n     */\r\n    alertify.dialog('confirm', function () {\r\n\r\n        var autoConfirm = {\r\n            timer: null,\r\n            index: null,\r\n            text: null,\r\n            duration: null,\r\n            task: function (event, self) {\r\n                if (self.isOpen()) {\r\n                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\r\n                    autoConfirm.duration -= 1;\r\n                    if (autoConfirm.duration === -1) {\r\n                        clearAutoConfirm(self);\r\n                        var button = self.__internal.buttons[autoConfirm.index];\r\n                        var closeEvent = createCloseEvent(autoConfirm.index, button);\r\n\r\n                        if (typeof self.callback === 'function') {\r\n                            self.callback.apply(self, [closeEvent]);\r\n                        }\r\n                        //close the dialog.\r\n                        if (closeEvent.close !== false) {\r\n                            self.close();\r\n                        }\r\n                    }\r\n                } else {\r\n                    clearAutoConfirm(self);\r\n                }\r\n            }\r\n        };\r\n\r\n        function clearAutoConfirm(self) {\r\n            if (autoConfirm.timer !== null) {\r\n                clearInterval(autoConfirm.timer);\r\n                autoConfirm.timer = null;\r\n                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\r\n            }\r\n        }\r\n\r\n        function startAutoConfirm(self, index, duration) {\r\n            clearAutoConfirm(self);\r\n            autoConfirm.duration = duration;\r\n            autoConfirm.index = index;\r\n            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\r\n            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\r\n            autoConfirm.task(null, self);\r\n        }\r\n\r\n\r\n        return {\r\n            main: function (_title, _message, _onok, _oncancel) {\r\n                var title, message, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 4:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                //nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: null,\r\n                labels: null,\r\n                onok: null,\r\n                oncancel: null,\r\n                defaultFocus: null,\r\n                reverseButtons: null,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'labels':\r\n                    if ('ok' in newValue && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].text = newValue.ok;\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if ('cancel' in newValue && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].text = newValue.cancel;\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                case 'defaultFocus':\r\n                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                clearAutoConfirm(this);\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            autoOk: function (duration) {\r\n                startAutoConfirm(this, 0, duration);\r\n                return this;\r\n            },\r\n            autoCancel: function (duration) {\r\n                startAutoConfirm(this, 1, duration);\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Prompt dialog object\r\n     *\r\n     * invoked by:\r\n     *\talertify.prompt(message);\r\n     *\talertify.prompt(message, value);\r\n     *\talertify.prompt(message, value, onok);\r\n     *\talertify.prompt(message, value, onok, oncancel);\r\n     *\talertify.prompt(title, message, value, onok, oncancel);\r\n     */\r\n    alertify.dialog('prompt', function () {\r\n        var input = document.createElement('INPUT');\r\n        var p = document.createElement('P');\r\n        return {\r\n            main: function (_title, _message, _value, _onok, _oncancel) {\r\n                var title, message, value, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    value = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    break;\r\n                case 4:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 5:\r\n                    title = _title;\r\n                    message = _message;\r\n                    value = _value;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('value', value);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: input,\r\n                        select: true\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                input.className = alertify.defaults.theme.input;\r\n                input.setAttribute('type', 'text');\r\n                input.value = this.get('value');\r\n                this.elements.content.appendChild(p);\r\n                this.elements.content.appendChild(input);\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                if (typeof message === 'string') {\r\n                    clearContents(p);\r\n                    p.innerHTML = message;\r\n                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\r\n                    clearContents(p);\r\n                    p.appendChild(message);\r\n                }\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                labels: undefined,\r\n                onok: undefined,\r\n                oncancel: undefined,\r\n                value: '',\r\n                type:'text',\r\n                reverseButtons: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'value':\r\n                    input.value = newValue;\r\n                    break;\r\n                case 'type':\r\n                    switch (newValue) {\r\n                    case 'text':\r\n                    case 'color':\r\n                    case 'date':\r\n                    case 'datetime-local':\r\n                    case 'email':\r\n                    case 'month':\r\n                    case 'number':\r\n                    case 'password':\r\n                    case 'search':\r\n                    case 'tel':\r\n                    case 'time':\r\n                    case 'week':\r\n                        input.type = newValue;\r\n                        break;\r\n                    default:\r\n                        input.type = 'text';\r\n                        break;\r\n                    }\r\n                    break;\r\n                case 'labels':\r\n                    if (newValue.ok && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if (newValue.cancel && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    this.settings.value = input.value;\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    if(!closeEvent.cancel){\r\n                        input.value = this.settings.value;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    // CommonJS\r\n    if ( typeof module === 'object' && typeof module.exports === 'object' ) {\r\n        module.exports = alertify;\r\n    // AMD\r\n    } else if ( typeof define === 'function' && define.amd) {\r\n        define( [], function () {\r\n            return alertify;\r\n        } );\r\n    // window\r\n    } else if ( !window.alertify ) {\r\n        window.alertify = alertify;\r\n    }\r\n\r\n} ( typeof window !== 'undefined' ? window : this ) );\r\n"],"sourceRoot":""}